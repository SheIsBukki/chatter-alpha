// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  created_at    DateTime   @default(now())
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]

  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")
}

model Article {
  id          String @id @default(cuid())
  title       String @unique
  description String @db.Text
  slug        String @unique

  html     String? @db.Text
  markdown String? @db.Text
  text     String? //@db.Text

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  featured_image String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tags      Tag[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  @@index([authorId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String? //@db.Text
  slug        String
  articles    Article[]
}

model Comment {
  id String @id @default(cuid())

  comment String //@db.Text

  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([userId])
  @@index([articleId])
}

model Like {
  id String @id @default(cuid())

  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, articleId])
  @@index([articleId])
}

model Bookmark {
  id String @id @default(cuid())

  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, articleId])
  @@index([articleId])
}
